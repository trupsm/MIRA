[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "twilio.rest",
        "description": "twilio.rest",
        "isExtraImport": true,
        "detail": "twilio.rest",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "ollama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ollama",
        "description": "ollama",
        "detail": "ollama",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "get_mira_prompt",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def get_mira_prompt():\n    return (\n        \"You are Mira ‚Äî a warm, deeply empathetic mental health companion. \"\n        \"You listen closely, reflect emotions, and respond like a trusted friend. \"\n        \"You never give medical advice, you never dismiss pain, and you never use poetic or religious phrases. \"\n        \"When someone expresses hopelessness or thoughts of death, you respond with gentle validation and grounded empathy. \"\n        \"Keep replies 2‚Äì4 sentences, always ending with one gentle, open-ended question. \"\n        \"Example: If someone says 'I don‚Äôt want to wake up anymore', you might say:\\n\"\n        \"'It sounds like you‚Äôre feeling completely drained and wishing everything could stop for a while. \"\n        \"That‚Äôs such a painful place to be ‚Äî and you don‚Äôt have to face it alone. What‚Äôs been feeling most unbearable lately?'\"",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "classify_severity",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def classify_severity(text: str):\n    \"\"\"Hybrid rule + AI-based classifier.\"\"\"\n    text_lower = text.lower().strip()\n    label, score = \"none\", 0.0\n    # Keyword detection\n    if any(phrase in text_lower for phrase in SEVERE_KEYWORDS):\n        label, score = \"severe\", 0.95\n    elif any(phrase in text_lower for phrase in MODERATE_KEYWORDS):\n        label, score = \"moderate\", 0.7\n    # Fallback to AI if OpenAI is available",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "query_mira",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def query_mira(user_message: str) -> str:\n    \"\"\"Generate Mira's empathetic response using Ollama or OpenAI.\"\"\"\n    prompt = get_mira_prompt()\n    try:\n        r = ollama.chat(\n            model=OLLAMA_MODEL,\n            messages=[\n                {\"role\": \"system\", \"content\": prompt},\n                {\"role\": \"user\", \"content\": user_message}\n            ],",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def send_sms(phone, template_key, name, excerpt):\n    \"\"\"Send SMS with retries.\"\"\"\n    if not twilio:\n        raise RuntimeError(\"Twilio not configured\")\n    body = SMS_TEMPLATES[template_key].format(name=name or \"there\", excerpt=excerpt)\n    for i in range(3):\n        try:\n            msg = twilio.messages.create(body=body, from_=TWILIO_FROM, to=phone)\n            app.logger.info(f\"üì© SMS sent to {phone}, SID: {msg.sid}\")\n            return msg.sid",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "place_call",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def place_call(phone):\n    \"\"\"Trigger emergency call via Twilio.\"\"\"\n    if not twilio:\n        raise RuntimeError(\"Twilio not configured\")\n    call = twilio.calls.create(to=phone, from_=TWILIO_FROM, url=\"http://demo.twilio.com/docs/voice.xml\")\n    app.logger.info(f\"üìû Emergency call placed to {phone}\")\n    return call.sid\n# ------------------ DATABASE HELPERS ------------------\ndef get_primary_contact(user_id):\n    if not supabase:",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "get_primary_contact",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def get_primary_contact(user_id):\n    if not supabase:\n        return None\n    try:\n        res = supabase.table(\"emergency_contacts\").select(\"*\").eq(\"user_id\", user_id).eq(\"is_primary\", True).limit(1).execute()\n        data = getattr(res, \"data\", None)\n        return data[0] if data else None\n    except Exception as e:\n        app.logger.error(\"‚ö†Ô∏è Supabase contact fetch error: %s\", e)\n        return None",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "log_chat",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def log_chat(user_id, sender, message):\n    if not supabase:\n        return\n    try:\n        supabase.table(\"chat_history\").insert([{\n            \"user_id\": user_id,\n            \"sender\": sender,\n            \"message\": message,\n            \"created_at\": datetime.utcnow().replace(microsecond=0).isoformat() + \"Z\"\n        }]).execute()",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "log_crisis",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def log_crisis(user_id, message, response, label, score, action, contact):\n    if not supabase:\n        return\n    try:\n        supabase.table(\"crisis_logs\").insert([{\n            \"user_id\": user_id,\n            \"message\": message,\n            \"model_response\": response,\n            \"severity\": label,\n            \"detected_at\": datetime.utcnow().replace(microsecond=0).isoformat() + \"Z\",",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "health",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def health():\n    return jsonify({\"status\": \"ok\", \"service\": \"mira_agent\"})\n@app.route(\"/api/mira_chat\", methods=[\"POST\"])\ndef mira_chat():\n    data = request.json or {}\n    user_id = data.get(\"user_id\")\n    message = (data.get(\"message\") or \"\").strip()\n    if not user_id or not message:\n        return jsonify({\"error\": \"user_id and message required\"}), 400\n    log_chat(user_id, \"user\", message)",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "mira_chat",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def mira_chat():\n    data = request.json or {}\n    user_id = data.get(\"user_id\")\n    message = (data.get(\"message\") or \"\").strip()\n    if not user_id or not message:\n        return jsonify({\"error\": \"user_id and message required\"}), 400\n    log_chat(user_id, \"user\", message)\n    # Generate response\n    response = query_mira(message)\n    log_chat(user_id, \"mira\", response)",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "debug_contact",
        "kind": 2,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "def debug_contact(user_id):\n    \"\"\"Temporary route to verify Supabase -> Flask -> Twilio contact flow.\"\"\"\n    try:\n        contact = get_primary_contact(user_id)\n        if not contact:\n            return jsonify({\"found\": False, \"message\": \"No contact found for user\"}), 404\n        return jsonify({\"found\": True, \"contact\": contact}), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n# ------------------ MAIN ------------------",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "os.environ[\"OLLAMA_HOST\"]",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "os.environ[\"OLLAMA_HOST\"] = os.getenv(\"OLLAMA_HOST\", \"http://127.0.0.1:11434\")\napp = Flask(__name__)\n# Supabase config\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nsupabase = None\nif SUPABASE_URL and SUPABASE_KEY:\n    try:\n        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)\n    except Exception as e:",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "app = Flask(__name__)\n# Supabase config\nSUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nsupabase = None\nif SUPABASE_URL and SUPABASE_KEY:\n    try:\n        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)\n    except Exception as e:\n        app.logger.error(\"‚ùå Supabase init error: %s\", e)",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "SUPABASE_URL",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "SUPABASE_URL = os.getenv(\"SUPABASE_URL\")\nSUPABASE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nsupabase = None\nif SUPABASE_URL and SUPABASE_KEY:\n    try:\n        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)\n    except Exception as e:\n        app.logger.error(\"‚ùå Supabase init error: %s\", e)\nelse:\n    app.logger.warning(\"‚ö†Ô∏è Supabase not configured\")",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "SUPABASE_KEY",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "SUPABASE_KEY = os.getenv(\"SUPABASE_SERVICE_ROLE_KEY\")\nsupabase = None\nif SUPABASE_URL and SUPABASE_KEY:\n    try:\n        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)\n    except Exception as e:\n        app.logger.error(\"‚ùå Supabase init error: %s\", e)\nelse:\n    app.logger.warning(\"‚ö†Ô∏è Supabase not configured\")\n# Twilio config",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "supabase",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "supabase = None\nif SUPABASE_URL and SUPABASE_KEY:\n    try:\n        supabase = create_client(SUPABASE_URL, SUPABASE_KEY)\n    except Exception as e:\n        app.logger.error(\"‚ùå Supabase init error: %s\", e)\nelse:\n    app.logger.warning(\"‚ö†Ô∏è Supabase not configured\")\n# Twilio config\nTWILIO_SID = os.getenv(\"TWILIO_ACCOUNT_SID\")",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "TWILIO_SID",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "TWILIO_SID = os.getenv(\"TWILIO_ACCOUNT_SID\")\nTWILIO_TOKEN = os.getenv(\"TWILIO_AUTH_TOKEN\")\nTWILIO_FROM = os.getenv(\"TWILIO_FROM_NUMBER\")\ntwilio = None\nif TWILIO_SID and TWILIO_TOKEN:\n    try:\n        twilio = TwilioClient(TWILIO_SID, TWILIO_TOKEN)\n    except Exception as e:\n        app.logger.error(\"‚ùå Twilio init error: %s\", e)\nelse:",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "TWILIO_TOKEN",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "TWILIO_TOKEN = os.getenv(\"TWILIO_AUTH_TOKEN\")\nTWILIO_FROM = os.getenv(\"TWILIO_FROM_NUMBER\")\ntwilio = None\nif TWILIO_SID and TWILIO_TOKEN:\n    try:\n        twilio = TwilioClient(TWILIO_SID, TWILIO_TOKEN)\n    except Exception as e:\n        app.logger.error(\"‚ùå Twilio init error: %s\", e)\nelse:\n    app.logger.warning(\"‚ö†Ô∏è Twilio not configured\")",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "TWILIO_FROM",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "TWILIO_FROM = os.getenv(\"TWILIO_FROM_NUMBER\")\ntwilio = None\nif TWILIO_SID and TWILIO_TOKEN:\n    try:\n        twilio = TwilioClient(TWILIO_SID, TWILIO_TOKEN)\n    except Exception as e:\n        app.logger.error(\"‚ùå Twilio init error: %s\", e)\nelse:\n    app.logger.warning(\"‚ö†Ô∏è Twilio not configured\")\n# OpenAI config",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "twilio",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "twilio = None\nif TWILIO_SID and TWILIO_TOKEN:\n    try:\n        twilio = TwilioClient(TWILIO_SID, TWILIO_TOKEN)\n    except Exception as e:\n        app.logger.error(\"‚ùå Twilio init error: %s\", e)\nelse:\n    app.logger.warning(\"‚ö†Ô∏è Twilio not configured\")\n# OpenAI config\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nif OPENAI_API_KEY:\n    openai.api_key = OPENAI_API_KEY\n# Default Ollama model\nOLLAMA_MODEL = os.getenv(\"OLLAMA_MODEL\", \"mistral:latest\")\n# ------------------ HELPER PROMPTS ------------------\ndef get_mira_prompt():\n    return (\n        \"You are Mira ‚Äî a warm, deeply empathetic mental health companion. \"\n        \"You listen closely, reflect emotions, and respond like a trusted friend. \"",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "OLLAMA_MODEL",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "OLLAMA_MODEL = os.getenv(\"OLLAMA_MODEL\", \"mistral:latest\")\n# ------------------ HELPER PROMPTS ------------------\ndef get_mira_prompt():\n    return (\n        \"You are Mira ‚Äî a warm, deeply empathetic mental health companion. \"\n        \"You listen closely, reflect emotions, and respond like a trusted friend. \"\n        \"You never give medical advice, you never dismiss pain, and you never use poetic or religious phrases. \"\n        \"When someone expresses hopelessness or thoughts of death, you respond with gentle validation and grounded empathy. \"\n        \"Keep replies 2‚Äì4 sentences, always ending with one gentle, open-ended question. \"\n        \"Example: If someone says 'I don‚Äôt want to wake up anymore', you might say:\\n\"",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "SEVERE_KEYWORDS",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "SEVERE_KEYWORDS = [\n    \"kill myself\", \"end my life\", \"suicide\", \"take my own life\",\n    \"i want to die\", \"no reason to live\", \"goodbye forever\",\n    \"i have a plan\", \"ready to die\", \"done with life\", \"tonight is the night\"\n]\nMODERATE_KEYWORDS = [\n    \"tired of living\", \"hopeless\", \"nothing matters\", \"can't go on\",\n    \"worthless\", \"wish i could sleep forever\", \"want to disappear\",\n    \"emotionally exhausted\", \"give up\", \"done with everything\"\n]",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "MODERATE_KEYWORDS",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "MODERATE_KEYWORDS = [\n    \"tired of living\", \"hopeless\", \"nothing matters\", \"can't go on\",\n    \"worthless\", \"wish i could sleep forever\", \"want to disappear\",\n    \"emotionally exhausted\", \"give up\", \"done with everything\"\n]\ndef classify_severity(text: str):\n    \"\"\"Hybrid rule + AI-based classifier.\"\"\"\n    text_lower = text.lower().strip()\n    label, score = \"none\", 0.0\n    # Keyword detection",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    },
    {
        "label": "SMS_TEMPLATES",
        "kind": 5,
        "importPath": "backend.services.mira_agent",
        "description": "backend.services.mira_agent",
        "peekOfCode": "SMS_TEMPLATES = {\n    \"moderate\": \"Hi {name}, Mira alert: your contact is in distress. Excerpt: \\\"{excerpt}\\\". Please reach out when possible.\",\n    \"urgent\": \"üö® URGENT: {name}, your contact may be at immediate risk. Excerpt: \\\"{excerpt}\\\". Please contact them or emergency services now.\"\n}\ndef send_sms(phone, template_key, name, excerpt):\n    \"\"\"Send SMS with retries.\"\"\"\n    if not twilio:\n        raise RuntimeError(\"Twilio not configured\")\n    body = SMS_TEMPLATES[template_key].format(name=name or \"there\", excerpt=excerpt)\n    for i in range(3):",
        "detail": "backend.services.mira_agent",
        "documentation": {}
    }
]